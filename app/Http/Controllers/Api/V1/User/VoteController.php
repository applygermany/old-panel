<?phpnamespace App\Http\Controllers\Api\V1\User;use App\Models\User;use App\Models\Votes;use App\Models\Comment;use App\ExcelExports\Users;use App\Exports\VoteExport;use Illuminate\Http\Request;use App\Http\Controllers\Controller;use App\Http\Services\V1\User\VoteService;use Maatwebsite\Excel\Facades\Excel;use App\Http\Resources\Expert\VoteResource;use App\Http\Resources\User\SecondCommentResource;class VoteController extends Controller {	protected $vote;			public function __construct(VoteService $vote) {		$this->vote = $vote;	}		public function apiExpertVotes() {				$id = auth()->guard('api')->user()->id;//		$id = 26;		$user = User::Find($id);        $comments = Comment::where('owner', $id)->where('status', 1)->orderBy('id', 'DESC')->get();		return response([			'status' => 1,			"msg"    => "رای ها",			'votes'  => (isset($votes) ? new VoteResource($votes) : new SecondCommentResource($comments)),		]);	}		public function submitVote(Request $request) {		return $this->vote->submitVote($request);	}		function expertVotes(Request $request) {		$votesRaw = Votes::all();		$votes = [];		foreach ($votesRaw as $vote) {			$user = User::find($vote->user_id);			$expert = User::find($vote->expert_id);			$vote->userName = $user->firstname . ' ' . $user->lastname;			if ($expert) {				$vote->expertName = $expert->firstname . ' ' . $expert->lastname;			}			$votes[] = $vote;		}		$users = User::all();		$options = "<option value=''>انتخاب کنید</option>";		foreach ($users as $user) {			$selected = '';			$options .= '<option value="' . $user->id . '" ' . $selected . '>' . $user->name . ' - ' . $user->mobile . ' / ' . $user->email . '</option>';		}		return view('admin.votes.votes', compact('votes', 'options'))->render();	}		public function showVoteData(Request $request) {		$voteId = $request->id;		$vote = Votes::find($voteId);		$answer = json_decode($vote->answer, true);		$type = json_decode($vote->types, true);		$answers = [];		$types = [];		foreach ($answer as $key => $value) {			$answers[] = (object)[				'title'  => $this->getAnswerName($key),				'answer' => $this->getAnswer($value),			];		}		foreach ($type as $item) {			$types[] = $this->getType($item);		}		return view('admin.votes.vote', compact('vote', 'answers', 'types'))->render();	}		private function getAnswerName($key) {		switch ($key) {			case 1:				return "به چه میزان از موارد زیر رضایت دارید؟";			case 2:				return "سرعت پاسخگویی و در دسترس بودن کارشناس";			case 3:				return "شیوه پاسخگویی و برخورد کارشناس";			case 4:				return "کیفیت نگارش رزومه و انگیزه نامه خود توسط تیم اپلای جرمنی";			case 5:				return "پشتیبانی بعد از پذیرش و انجام امور مرتبط با ویزا, ثبت نام دانشگاه, بیمه و درخواست خوابگاه";			case 6:				return "به طور کلی چه میزان از خدمات و کیفیت کار تیم اپلای جرمنی رضایت داشتید؟";			case 7:				return "چقدر احتمال دارد اپلای جرمنی را به دوستان و اشنایان خود معرفی کنید؟";		}		return "نا مشخص";	}		private function getAnswer($value) {		switch ($value) {			case 1:				return "بسیار زیاد";			case 2:				return "زیاد";			case 3:				return "متوسط";			case 4:				return "کم";			case 5:				return "خیلی کم";		}		return "نا مشخص";	}		private function getType($value) {		switch ($value) {			case 1:				return "کارشناس";			case 2:				return "مشــاور";			case 3:				return "امور گرافیکی";			case 4:				return "گرافیست";			case 5:				return "ادیتور ویدیو";			case 6:				return "برنامه نویس";			case 7:				return "تولیـــد محتوای متنی";			case 8:				return "روابط عمومی و فــــروش";			case 9:				return "تولید محتوای ویدیویی";			case 10:				return "نگارش رزومه و انگیـــــزه‌نامه";			case 11:				return "سفیر اپلای جرمنی در شهر سکونت خود در آلمان";		}		return "نا مشخص";	}		public function deleteVotes() {		$votes = Votes::all();		foreach ($votes as $vote) {			$vote->delete();		}	}		public function downloadVotes() {		return Excel::download(new VoteExport(), 'votes.xlsx');	}}